"""here's where we manage our redis cache"""
import redis
from configuration import config
from ast import literal_eval

REDIS_SERVER = None


def read_configuration():
    """read the redis server configuration from the
    config.py file - which was generated by the
    deploy process"""
    try:
        redis_endpoint = config.REDIS_HOST
        redis_password = config.REDIS_PASSWORD
        redis_port = int(config.REDIS_PORT)
    except (ValueError, AttributeError):
        return None, None, None

    return redis_endpoint, redis_password, redis_port


def initialize_cloud_redis(injected_server=None):
    """
    Initialize the redis cloud server. Read environment
    variables to get our endpoint & pass phrase:

    REDIS_HOST
    REDIS_PASSWORD
    REDIS_PORT
    :return:
    """
    global REDIS_SERVER # pylint: disable=W0603
    if injected_server is None:
        if REDIS_SERVER is not None: # if we have a redis instance, return it
            return
        redis_endpoint, redis_password, redis_port = read_configuration()
        redis_server = redis.Redis(host=redis_endpoint,
                                   port=redis_port,
                                   password=redis_password)
    else:
        # injecting a fake redis will always override existing instance
        redis_server = injected_server

    REDIS_SERVER = redis_server
    return


def exists(redis_key: str) -> bool:
    """returns True if the specified key exists in the cache"""
    return REDIS_SERVER.exists(redis_key) == 1


def cache_station_list(stations: dict) -> None:
    """Cache the station list"""
    REDIS_SERVER.set('station_list', stations)


def station_list() -> dict:
    """retrieve the station list from the cache"""
    stations = REDIS_SERVER.get('station_list')
    if isinstance(stations, bytes):
        return literal_eval(stations.decode('utf-8'))
    return {}


def home_key(user_id: str) -> str:
    """create key for the home value (a uuid no doubt)"""
    return "JerseyTrains_home_" + user_id.replace(' ', '') + "_uid"


